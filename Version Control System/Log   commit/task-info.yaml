type: edu
custom_name: Log & commit
files:
- name: src/svcs/Main.kt
  visible: true
  text: |-
    package svcs

    fun main(args: Array<String>) {

    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.io.File
    import kotlin.random.Random


    class TestStage3 : StageTest<String>() {
        @DynamicTest
        fun helpPageTest(): CheckResult {
            try {
                checkHelpPageOutput(TestedProgram().start())
                checkHelpPageOutput(TestedProgram().start("--help"))
            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        @DynamicTest
        fun configTest(): CheckResult {
            try {
                checkOutputString(TestedProgram().start("config"), "Please, tell me who you are.")
                checkOutputString(TestedProgram().start("config", "Max"), "The username is Max.")
                checkOutputString(TestedProgram().start("config"), "The username is Max.")
                checkOutputString(TestedProgram().start("config", "John"), "The username is John.")
                checkOutputString(TestedProgram().start("config"), "The username is John.")
            } finally {
                deleteVcsDir()
            }

            return CheckResult.correct()
        }

        @DynamicTest
        fun addTest(): CheckResult {
            val fileName1 = "file${Random.nextInt(0, 1000)}.txt"
            val fileName2= "file${Random.nextInt(0, 1000)}.txt"

            val file1 = File(fileName1)
            val file2 = File(fileName2)
            file1.createNewFile()
            file2.createNewFile()

            try {
                checkOutputString(TestedProgram().start("add"), "Add a file to the index.")
                checkOutputString(TestedProgram().start("add", fileName1), "The file '$fileName1' is tracked.")
                checkOutputString(TestedProgram().start("add"), "Tracked files:\n$fileName1")
                checkOutputString(TestedProgram().start("add", fileName2), "The file '$fileName2' is tracked.")
                checkOutputString(TestedProgram().start("add"), "Tracked files:\n$fileName1\n$fileName2")

                val notExistsFileName = "file${Random.nextInt(0, 1000)}.txt"
                checkOutputString(
                        TestedProgram().start("add", notExistsFileName),
                        "Can't find '$notExistsFileName'."
                )
            } finally {
                deleteVcsDir()
                file1.delete()
                file2.delete()
            }

            return CheckResult.correct()
        }

        @DynamicTest
        fun commitAndLogTest(): CheckResult {
            val file1 = File("first_file.txt")
            val file2 = File("second_file.txt")

            file1.writeText("some test data for the first file")
            file2.writeText("some test data for the second file")

            try {
                val username = "TestUserName"

                TestedProgram().start("config", username)
                TestedProgram().start("add", file1.name)
                TestedProgram().start("add", file2.name)

                checkOutputString(TestedProgram().start("log"), "No commits yet.")
                checkOutputString(TestedProgram().start("commit"), "Message was not passed.")

                checkOutputString(TestedProgram().start("commit", "Test message"), "Changes are committed.")

                var got = TestedProgram().start("log")
                var want = "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message"

                var regex = Regex(
                        "commit [^\\s]+\n" +
                                "Author: $username\n" +
                                "Test message", RegexOption.IGNORE_CASE
                )
                checkLogOutput(got, want, regex)

                checkOutputString(TestedProgram().start("commit", "Test message2"), "Nothing to commit.")

                file2.appendText("some text")
                checkOutputString(TestedProgram().start("commit", "Test message3"), "Changes are committed.")

                got = TestedProgram().start("log")
                want = "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message3\n\n" +
                        "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message"
                regex = Regex(
                        "commit [^\\s]+\n" +
                                "Author: $username\n" +
                                "Test message3\n" +
                                "commit [^\\s]+\n" +
                                "Author: $username\n" +
                                "Test message", RegexOption.IGNORE_CASE
                )
                checkLogOutput(got, want, regex)
                checkUniqueCommitHashes(got)
            } finally {
                deleteVcsDir()
                file1.delete()
                file2.delete()
            }

            return CheckResult.correct()
        }

        @DynamicTest
        fun checkoutTest(): CheckResult {
            try {
                checkOutputString(TestedProgram().start("checkout"), "Restore a file.")
            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        @DynamicTest
        fun wrongArgTest(): CheckResult {
            try {
                val suffix = Random.nextInt(0,1000)
                checkOutputString(TestedProgram().start("wrongArg$suffix"), "'wrongArg$suffix' is not a SVCS command.")
            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        private fun prepareString(s: String) =
                s.trim().split(" ").filter { it.isNotBlank() }.joinToString(" ")

        private fun prepareLogOutput(s: String) =
                prepareString(s).trim().split('\n').filter { it.isNotBlank() }.joinToString("\n")

        private fun checkHelpPageOutput(got: String) {
            val helpPage = "These are SVCS commands:\n" +
                    "config     Get and set a username.\n" +
                    "add        Add a file to the index.\n" +
                    "log        Show commit logs.\n" +
                    "commit     Save changes.\n" +
                    "checkout   Restore a file."

            if (got.isBlank()) {
                throw WrongAnswer(
                        "Your program should output:\n$helpPage\n\n" +
                                "But printed nothing"
                )
            } else if (!prepareString(got).equals(prepareString(helpPage), true)) {
                throw WrongAnswer(
                        "Your program should output:\n$helpPage\n\n" +
                                "But printed:\n$got"
                )
            }
        }


        private fun checkLogOutput(got: String, want: String, regex: Regex) {
            if (got.isBlank()) {
                throw WrongAnswer(
                        "Your program printed nothing"
                )
            } else if (!prepareLogOutput(got).contains(regex)) {
                throw WrongAnswer(
                        "Your program should output:\n\"$want\",\n" +
                                "but printed:\n\"$got\""
                )
            }
        }

        private fun parseCommitHashes(logOutput: String) : List<String>{
            val regex = Regex(
                    "commit ([^\\s]+)", RegexOption.IGNORE_CASE
            )

            return regex.findAll(logOutput).map { it.groupValues[1] }.toList()
        }

        private fun checkUniqueCommitHashes(got: String) {
            val commitHashes = parseCommitHashes(got)

            if (commitHashes.size != commitHashes.toSet().size) {
                throw WrongAnswer(
                        "Commit IDs are not unique"
                )
            }
        }

        private fun checkOutputString(got: String, want: String) {
            if (got.isBlank()) {
                throw WrongAnswer(
                        "Your program should output \"$want\",\n" +
                                "but printed nothing"
                )
            } else if (!prepareString(got).equals(want, true)) {
                throw WrongAnswer(
                        "Your program should output \"$want\",\n" +
                                "but printed: \"$got\""
                )
            }
        }


        private fun deleteVcsDir() {
            val dir = File("vcs")
            if (dir.exists()) {
                dir.deleteRecursively()
            }
        }

    }
  learner_created: false
- name: vsc/index.txt
  visible: true
  text: |
    file350.txt
    file639.txt
  learner_created: true
- name: src/svcs/Svcs.kt
  visible: true
  text: |-
    package svcs

    import java.io.File
    import java.nio.file.Path
    import kotlin.io.path.writeLines

    class Svcs {
        val config: File
        val index: File
        var username: String
        val files = mutableListOf<String>()

        init {
            val vcsDir = File("vsc")
            if (!vcsDir.exists()) {
                vcsDir.mkdir()
            }
            config = File(vcsDir, "config.txt")
            index = File(vcsDir, "index.txt")
            username = if (config.exists()) config.readText() else ""
            if (index.exists()) {
                files.addAll(index.readLines())
            }
            System.err.println("""
                username=$username
                files=$files
            """.trimIndent())
        }

        fun config(args: Array<String>) {
            if (args.isEmpty()) {
                if (username.isEmpty()) {
                    println("Please, tell me who you are.")
                    return
                }
            } else {
                username = args[0]
                config.writeText(username)
            }
            println("The username is $username.")
        }

        fun add(args: Array<String>) {
            if (args.isEmpty()) {
                if (files.isEmpty()) {
                    println("Add a file to the index.")
                } else {
                    println("Tracked files:")
                    files.forEach({ file -> println(file) })
                }
            } else {
                val filename = args[0]
                val file = File(filename)
                if (file.exists()) {
                    files.add(file.name)
                    index.toPath().writeLines(files)
    //                index.writeText(files.joinToString(System.out.linese))
                    println("The file '${file.name}' is tracked.")
                } else {
                    println("Can't find '$filename'.")
                }
            }
        }
    }
  learner_created: true
- name: vsc/config.txt
  visible: true
  text: John
  learner_created: true
- name: src/svcs/Commit.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/177/stages/911/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 06 Aug 2021 03:55:10 UTC
record: -1
